Done.
Setting up the random seed for reproducibility...
Done.
dynamic_import - class_name:  OracleTrainer
Initializing model...
Done.
Initializing datasets...
Done.
Initializing clients...
dynamic_import - class_name:  OracleClient
Done.
Initializing server...
dynamic_import - class_name:  OracleServer
Running without server optimizer
Running without server optimizer
Done.
Initialize return score, metrics, ckpt, ckpt step...
Setting up metrics...
Done.
Done.
Initializing optimizer and scheduler...
Done.
dynamic_import - class_name:  OracleClient
The experiment begins...
ROUND 1/10: Training 5 Clients...
CLIENT 1/5: erfurt5 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 2/5: weimar3 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 3/5: strasbourg3 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 4/5: tubingen2 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 5/5: weimar6 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 2/10: Training 5 Clients...
CLIENT 1/5: dusseldorf4 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 2/5: dusseldorf1 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 3/5: hanover6 RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 4/5: jena0 HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 5/5: jena5 HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 3/10: Training 5 Clients...
CLIENT 1/5: erfurt3 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 2/5: tubingen6 RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 3/5: strasbourg7 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 4/5: darmstadt3 HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 5/5: tubingen0 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 4/10: Training 5 Clients...
CLIENT 1/5: tubingen1 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 2/5: erfurt4 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 3/5: darmstadt1 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 4/5: stuttgart7 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 5/5: erfurt2 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 5/10: Training 5 Clients...
CLIENT 1/5: cologne2 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 2/5: darmstadt3 HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 3/5: hamburg3 RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 4/5: tubingen5 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 5/5: bremen5 RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
Testing...
Client 1/2 - test_user HHA
test_user HHA: 20/500, 4.0%
test_user HHA: 40/500, 8.0%
test_user HHA: 60/500, 12.0%
test_user HHA: 80/500, 16.0%
Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7fd5accb79d0>
Traceback (most recent call last):
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1328, in __del__
    self._shutdown_workers()
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1301, in _shutdown_workers
    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/multiprocessing/process.py", line 149, in join
    res = self._popen.wait(timeout)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/multiprocessing/popen_fork.py", line 40, in wait
    if not wait([self.sentinel], timeout):
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/multiprocessing/connection.py", line 936, in wait
    ready = selector.select(timeout)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/selectors.py", line 416, in select
    fd_event_list = self._selector.poll(timeout)
KeyboardInterrupt:
Traceback (most recent call last):
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 51, in <module>
    run_experiment()
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 20, in run_experiment
    max_score = trainer.train(*trainer.train_args, **trainer.train_kwargs)
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 89, in train
    return self.perform_fed_oracle_training(
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 83, in perform_fed_oracle_training
    max_scores, _ = self.test(self.target_test_clients, test_metric, r, 'ROUND', max_scores,
  File "/home/utente/Scrivania/PROVA/LADD/src/general_trainer.py", line 348, in test
    scores = self.perform_test(metric, test_clients, step)
  File "/home/utente/Scrivania/PROVA/LADD/src/general_trainer.py", line 312, in perform_test
    loss = c.test(metric, swa=swa)
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/oracle_client.py", line 254, in test
    outputs = self.get_test_output(images)
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/client.py", line 117, in get_test_output
    return self.model(images)['out']
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 886, in forward
    output = self.module(*inputs[0], **kwargs[0])
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torchvision/models/segmentation/_utils.py", line 25, in forward
    features = self.backbone(x)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/fx/graph_module.py", line 606, in wrapped_call
    return cls_call(self, *args, **kwargs)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/fx/graph_module.py", line 608, in wrapped_call
    return super(type(self), self).__call__(*args, **kwargs)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "<eval_with_key>.12", line 133, in forward
    _15_conv_7 = getattr(getattr(self, "15").conv, "7")(_15_conv_6);  _15_conv_6 = None
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1173, in __getattr__
    if '_modules' in self.__dict__:
KeyboardInterrupt