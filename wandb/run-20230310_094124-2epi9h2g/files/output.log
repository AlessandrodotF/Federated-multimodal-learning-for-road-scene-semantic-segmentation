Done.
Setting up the random seed for reproducibility...
Done.
Initializing model...
Done.
Initializing datasets...
Done.
Initializing clients...
Done.
Initializing server...
Running without server optimizer
Done.
Initialize return score, metrics, ckpt, ckpt step...
Setting up metrics...
Done.
Done.
Initializing optimizer and scheduler...
Done.
Generating sample ids for plots...
Done.
The experiment begins...
ROUND 1/2: Training 2 Clients...
CLIENT 1/2: RGB
EPOCH 1: ended.
CLIENT 2/2: RGB
EPOCH 1: ended.
ROUND 2/2: Training 2 Clients...
CLIENT 1/2: RGB
EPOCH 1: ended.
CLIENT 2/2: HHA
EPOCH 1: ended.
Testing...
Client 1/1 - HHA
HHA: 20/500, 4.0%
HHA: 40/500, 8.0%
Traceback (most recent call last):
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 47, in <module>
    run_experiment()
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 18, in run_experiment
    max_score = trainer.train(*trainer.train_args, **trainer.train_kwargs)
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 54, in train
    return self.perform_fed_oracle_training(
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 48, in perform_fed_oracle_training
    max_scores, _ = self.test(self.target_test_clients, test_metric, r, 'ROUND', max_scores,
  File "/home/utente/Scrivania/PROVA/LADD/src/general_trainer.py", line 280, in test
    scores = self.perform_test(metric, test_clients, step)
  File "/home/utente/Scrivania/PROVA/LADD/src/general_trainer.py", line 254, in perform_test
    loss = c.test(metric, swa=swa)
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/oracle_client.py", line 243, in test
    self.update_metric(metric, outputs, labels, is_test=True)
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/client.py", line 86, in update_metric
    labels = labels.cpu().numpy()
KeyboardInterrupt