Done.
Setting up the random seed for reproducibility...
Done.
class_name:  OracleTrainer
Initializing model...
Done.
Initializing datasets...
Done.
Initializing clients...
class_name:  OracleClient
last print data
last print data
last print data/HHA_DATA
last print data
last print data
last print data
last print data
last print data
last print data/HHA_DATA
last print data
last print data
last print data
last print data
last print data
last print data
last print data
last print data/HHA_DATA
last print data
Traceback (most recent call last):
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 49, in <module>
    run_experiment()
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 15, in run_experiment
    trainer = trainer_class(args, writer, device, rank, world_size)
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 8, in __init__
    super().__init__(args, writer, device, rank, world_size)
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/trainer.py", line 11, in __init__
    super().__init__(args, writer, device, rank, world_size)
  File "/home/utente/Scrivania/PROVA/LADD/src/general_trainer.py", line 56, in __init__
    self.__clients_setup()
  File "/home/utente/Scrivania/PROVA/LADD/src/general_trainer.py", line 136, in __clients_setup
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/oracle_client.py", line 16, in __init__
    super().__init__(args, client_id, dataset, model, writer, batch_size, world_size, rank, num_gpu,
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/client.py", line 65, in __init__
    self.profiler_path = os.path.join('profiler', self.args.profiler_folder) if self.args.profiler_folder else None
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/client.py", line 65, in __init__
    self.profiler_path = os.path.join('profiler', self.args.profiler_folder) if self.args.profiler_folder else None
  File "_pydevd_bundle/pydevd_cython.pyx", line 1589, in _pydevd_bundle.pydevd_cython.ThreadTracer.__call__
  File "_pydevd_bundle/pydevd_cython.pyx", line 929, in _pydevd_bundle.pydevd_cython.PyDBFrame.trace_dispatch
  File "_pydevd_bundle/pydevd_cython.pyx", line 920, in _pydevd_bundle.pydevd_cython.PyDBFrame.trace_dispatch
  File "_pydevd_bundle/pydevd_cython.pyx", line 317, in _pydevd_bundle.pydevd_cython.PyDBFrame.do_wait_suspend
  File "/home/utente/pycharm/plugins/python-ce/helpers/pydev/pydevd.py", line 1160, in do_wait_suspend
    self._do_wait_suspend(thread, frame, event, arg, suspend_type, from_this_thread)
  File "/home/utente/pycharm/plugins/python-ce/helpers/pydev/pydevd.py", line 1174, in _do_wait_suspend
    self.process_internal_commands()
  File "/home/utente/pycharm/plugins/python-ce/helpers/pydev/pydevd.py", line 828, in process_internal_commands
    self.notify_thread_created(thread_id, t, use_lock=False)
  File "/home/utente/pycharm/plugins/python-ce/helpers/pydev/pydevd.py", line 760, in notify_thread_created
    with self._lock_running_thread_ids if use_lock else NULL:
  File "/home/utente/pycharm/plugins/python-ce/helpers/pydev/_pydevd_bundle/pydevd_constants.py", line 425, in __enter__
    def __enter__(self, *args, **kwargs):
KeyboardInterrupt
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/utente/pycharm/plugins/python-ce/helpers/pydev/pydevd.py", line 2195, in <module>
    main()
  File "/home/utente/pycharm/plugins/python-ce/helpers/pydev/pydevd.py", line 2179, in main
    handle_keyboard_interrupt()
  File "/home/utente/pycharm/plugins/python-ce/helpers/pydev/pydevd.py", line 1997, in handle_keyboard_interrupt
    traceback.print_exception(type(value), value, tb, limit=limit)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/traceback.py", line 103, in print_exception
    for line in TracebackException(
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/traceback.py", line 517, in __init__
    self.stack = StackSummary.extract(
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/traceback.py", line 366, in extract
    f.line
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/traceback.py", line 288, in line
    self._line = linecache.getline(self.filename, self.lineno).strip()
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/linecache.py", line 30, in getline
    lines = getlines(filename, module_globals)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/linecache.py", line 46, in getlines
    return updatecache(filename, module_globals)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/linecache.py", line 136, in updatecache
    with tokenize.open(fullname) as fp:
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/tokenize.py", line 394, in open
    encoding, lines = detect_encoding(buffer.readline)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/tokenize.py", line 363, in detect_encoding
    first = read_or_stop()
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/tokenize.py", line 320, in read_or_stop
    try:
KeyboardInterrupt