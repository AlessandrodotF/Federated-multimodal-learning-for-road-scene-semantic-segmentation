Done.
Setting up the random seed for reproducibility...
Done.
dynamic_import - class_name:  OracleTrainer
Initializing model...
Done.
Initializing datasets...
Done.
Initializing clients...
dynamic_import - class_name:  OracleClient
Done.
Initializing server...
dynamic_import - class_name:  OracleServer
Running without server optimizer
Running without server optimizer
Done.
Initialize return score, metrics, ckpt, ckpt step...
Setting up metrics...
Done.
Done.
Initializing optimizer and scheduler...
Done.
Generating sample ids for plots...
Done.
dynamic_import - class_name:  OracleClient
The experiment begins...
ROUND 1/4: Training 1 Clients...
CLIENT 1/1: weimar5 RGB
tensor([[[ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],
        [[10, 10, 10,  ...,  2,  2,  2],
         [10, 10, 10,  ...,  2,  2,  2],
         [10, 10, 10,  ...,  2,  2,  2],
         ...,
         [10, 10, 10,  ...,  2,  2,  2],
         [10, 10, 10,  ...,  2,  2,  2],
         [10, 10, 10,  ...,  2,  2,  2]],
        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],
        ...,
        [[ 2,  2,  2,  ...,  2,  2,  2],
         [ 2,  2,  2,  ...,  2,  2,  2],
         [ 2,  2,  2,  ...,  2,  2,  2],
         ...,
         [ 2,  2,  2,  ...,  2,  2,  2],
         [ 2,  2,  2,  ...,  2,  2,  2],
         [ 2,  2,  2,  ...,  2,  2,  2]],
        [[ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         ...,
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0],
         [ 0,  0,  0,  ...,  0,  0,  0]],
        [[ 2,  2,  2,  ...,  8,  8,  8],
         [ 2,  2,  2,  ...,  8,  8,  8],
         [ 2,  2,  2,  ...,  8,  8,  8],
         ...,
         [ 9,  9,  9,  ...,  3,  3,  3],
         [ 9,  9,  9,  ...,  3,  3,  3],
         [ 9,  9,  9,  ...,  3,  3,  3]]], device='cuda:0')
Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7f96bf1a1a60>
Traceback (most recent call last):
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1328, in __del__
    self._shutdown_workers()
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1301, in _shutdown_workers
    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/multiprocessing/process.py", line 149, in join
    res = self._popen.wait(timeout)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/multiprocessing/popen_fork.py", line 40, in wait
    if not wait([self.sentinel], timeout):
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/multiprocessing/connection.py", line 936, in wait
    ready = selector.select(timeout)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/selectors.py", line 416, in select
    fd_event_list = self._selector.poll(timeout)
KeyboardInterrupt:
Traceback (most recent call last):
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 49, in <module>
    run_experiment()
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 20, in run_experiment
    max_score = trainer.train(*trainer.train_args, **trainer.train_kwargs)
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 77, in train
    return self.perform_fed_oracle_training(
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 39, in perform_fed_oracle_training
    losses = self.server.train_clients(partial_metric=partial_train_metric)
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/servers/oracle_server.py", line 71, in train_clients
    out = c.train(partial_metric, r=r)
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/oracle_client.py", line 196, in train
    dict_all_iters_losses = self.run_epoch(epoch, optimizer, metric=partial_metric, r=r)
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/oracle_client.py", line 166, in run_epoch
    self.__exec_epoch(optimizer, cur_epoch, metric, scheduler, plot_lr, dict_all_iters_losses,
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/oracle_client.py", line 131, in __exec_epoch
    dict_calc_losses, outputs = self.calc_loss_and_output(images, labels)
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/client.py", line 105, in calc_loss_and_output
    dict_calc_losses = {'loss_tot': loss_tot}
KeyboardInterrupt