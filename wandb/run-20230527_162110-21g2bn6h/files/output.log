Done.
Setting up the random seed for reproducibility...
Done.
dynamic_import - class_name:  OracleTrainer
Initializing model...
Done.
Initializing datasets...
Done.
Initializing clients...
dynamic_import - class_name:  OracleClient
Done.
Initializing server...
dynamic_import - class_name:  OracleServer
Running without server optimizer
Running without server optimizer
Done.
Initialize return score, metrics, ckpt, ckpt step...
Setting up metrics...
Done.
Done.
Initializing optimizer and scheduler...
Done.
dynamic_import - class_name:  OracleClient
The experiment begins...
ROUND 1/10: Training 5 Clients...
CLIENT 1/5: erfurt5 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 2/5: weimar3 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 3/5: strasbourg3 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 4/5: tubingen2 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 5/5: weimar6 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 2/10: Training 5 Clients...
CLIENT 1/5: dusseldorf4 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 2/5: dusseldorf1 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 3/5: hanover6 RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 4/5: jena0 HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 5/5: jena5 HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 3/10: Training 5 Clients...
CLIENT 1/5: erfurt3 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 2/5: tubingen6 RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 3/5: strasbourg7 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 4/5: darmstadt3 HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 5/5: tubingen0 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 4/10: Training 5 Clients...
CLIENT 1/5: tubingen1 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 2/5: erfurt4 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 3/5: darmstadt1 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 4/5: stuttgart7 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 5/5: erfurt2 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 5/10: Training 5 Clients...
CLIENT 1/5: cologne2 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 2/5: darmstadt3 HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 3/5: hamburg3 RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 4/5: tubingen5 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 5/5: bremen5 RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
Case:   HHA
Traceback (most recent call last):
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 51, in <module>
    run_experiment()
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 20, in run_experiment
    max_score = trainer.train(*trainer.train_args, **trainer.train_kwargs)
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 88, in train
    return self.perform_fed_oracle_training(
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 77, in perform_fed_oracle_training
    #     max_scores[0], _ = self.test(self.target_test_clients[0], test_metric, r, 'ROUND', max_scores[0],
KeyboardInterrupt
Error in atexit._run_exitfuncs:
Traceback (most recent call last):
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/wandb/sdk/wandb_run.py", line 1604, in <lambda>
    atexit.register(lambda: self._atexit_cleanup())
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/wandb/sdk/wandb_run.py", line 1574, in _atexit_cleanup
    if os.path.exists(self._settings.resume_fname):
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/wandb/sdk/wandb_settings.py", line 523, in resume_fname
    resume_fname = self._path_convert(self.resume_fname_spec)
  File "/home/utente/anaconda3/envs/LADD/lib/python3.9/site-packages/wandb/sdk/wandb_settings.py", line 750, in _path_convert
    format_dict["timespec"] = datetime.strftime(
