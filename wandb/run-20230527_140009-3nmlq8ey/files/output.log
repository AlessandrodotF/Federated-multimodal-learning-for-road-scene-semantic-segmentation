Done.
Setting up the random seed for reproducibility...
Done.
dynamic_import - class_name:  OracleTrainer
Initializing model...
Done.
Initializing datasets...
Done.
Initializing clients...
dynamic_import - class_name:  OracleClient
Done.
Initializing server...
dynamic_import - class_name:  OracleServer
Running without server optimizer
Running without server optimizer
Done.
Initialize return score, metrics, ckpt, ckpt step...
Setting up metrics...
Done.
Done.
Initializing optimizer and scheduler...
Done.
Generating sample ids for plots...
Done.
dynamic_import - class_name:  OracleClient
The experiment begins...
ROUND 1/4: Training 3 Clients...
CLIENT 1/3: erfurt5 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 2/3: weimar3 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 3/3: strasbourg3 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 2/4: Training 3 Clients...
CLIENT 1/3: dusseldorf4 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 2/3: dusseldorf1 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 3/3: hanover6 RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 3/4: Training 3 Clients...
CLIENT 1/3: erfurt3 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 2/3: tubingen6 RGB
torch.Size([16, 3, 10, 10])
RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 3/3: strasbourg7 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 4/4: Training 3 Clients...
CLIENT 1/3: tubingen1 HHA
torch.Size([16, 3, 10, 10])
HHA
torch.Size([16, 3, 10, 10])
HHA
EPOCH 1: ended.
CLIENT 2/3: erfurt4 RGB
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
CLIENT 3/3: darmstadt1 RGB
Traceback (most recent call last):
  File "/home/utente/pycharm/plugins/python-ce/helpers/pydev/pydevd.py", line 1496, in _exec
    pydev_imports.execfile(file, globals, locals)  # execute the script
  File "/home/utente/pycharm/plugins/python-ce/helpers/pydev/_pydev_imps/_pydev_execfile.py", line 18, in execfile
    exec(compile(contents+"\n", file, 'exec'), glob, loc)
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 51, in <module>
    run_experiment()
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 20, in run_experiment
    max_score = trainer.train(*trainer.train_args, **trainer.train_kwargs)
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 84, in train
    return self.perform_fed_oracle_training(
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 74, in perform_fed_oracle_training
    max_scores[0], _ = self.test(self.target_test_clients[0], test_metric, r, 'ROUND', max_scores[0],
  File "/home/utente/Scrivania/PROVA/LADD/src/general_trainer.py", line 333, in test
    mean_max_score = sum(max_scores) / len(max_scores)
TypeError: 'int' object is not iterable
torch.Size([16, 3, 10, 10])
RGB
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND