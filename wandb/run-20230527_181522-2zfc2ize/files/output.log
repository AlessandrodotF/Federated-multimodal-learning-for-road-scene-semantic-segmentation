Done.
Setting up the random seed for reproducibility...
Done.
dynamic_import - class_name:  OracleTrainer
Initializing model...
Done.
Initializing datasets...
Done.
Initializing clients...
dynamic_import - class_name:  OracleClient
Done.
Initializing server...
dynamic_import - class_name:  OracleServer
Running without server optimizer
Running without server optimizer
Done.
Initialize return score, metrics, ckpt, ckpt step...
Setting up metrics...
Done.
Done.
Initializing optimizer and scheduler...
Done.
dynamic_import - class_name:  OracleClient
The experiment begins...
ROUND 1/15: Training 2 Clients...
CLIENT 1/2: erfurt5 RGB
torch.Size([16, 3, 3, 3])
RGB
EPOCH 1: ended.
CLIENT 2/2: weimar3 HHA
torch.Size([16, 3, 3, 3])
HHA
torch.Size([16, 3, 3, 3])
HHA
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
ROUND 2/15: Training 2 Clients...
CLIENT 1/2: dusseldorf4 HHA
torch.Size([16, 3, 3, 3])
HHA
torch.Size([16, 3, 3, 3])
HHA
torch.Size([16, 3, 3, 3])
HHA
EPOCH 1: ended.
CLIENT 2/2: dusseldorf1 HHA
torch.Size([16, 3, 3, 3])
HHA
torch.Size([16, 3, 3, 3])
HHA
torch.Size([16, 3, 3, 3])
HHA
EPOCH 1: ended.
QUI ARRIVA ALL'UPDATE
AGGREGATION: END OF THE ROUND
Testing...
Client 1/1 - all_target_train_data RGB
all_target_train_data RGB: 50/2904, 1.72%
Traceback (most recent call last):
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 51, in <module>
    run_experiment()
  File "/home/utente/Scrivania/PROVA/LADD/src/run.py", line 20, in run_experiment
    max_score,max_score_rgb = trainer.train(*trainer.train_args, **trainer.train_kwargs)
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 88, in train
    return self.perform_fed_oracle_training(
  File "/home/utente/Scrivania/PROVA/LADD/src/federated/trainers/oracle_trainer.py", line 70, in perform_fed_oracle_training
    self.test([self.all_target_client], eval_train_metric, r, 'ROUND', self.get_fake_max_scores(False, 1),
  File "/home/utente/Scrivania/PROVA/LADD/src/general_trainer.py", line 352, in test
    scores = self.perform_test(metric, test_clients, step)
  File "/home/utente/Scrivania/PROVA/LADD/src/general_trainer.py", line 316, in perform_test
    loss = c.test(metric, swa=swa)
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/oracle_client.py", line 255, in test
    self.update_metric(metric, outputs, labels, is_test=True)
  File "/home/utente/Scrivania/PROVA/LADD/src/clients/client.py", line 91, in update_metric
    labels = labels.cpu().numpy()
KeyboardInterrupt